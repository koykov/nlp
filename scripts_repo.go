// Code generated by "/tmp/GoLand/___nlpc_scripts -module=scripts -input=raw/scripts.json". DO NOT EDIT.

package nlp

import (
	"github.com/koykov/entry"
	"unicode"
)

const (
	ScriptLatin Script = iota
	ScriptArabic
	ScriptCyrillic
	ScriptDevanagari
	ScriptEthiopic
	ScriptHan
	ScriptTagalog
	ScriptPhags_Pa
	ScriptTelugu
	ScriptHebrew
	ScriptBopomofo
	ScriptMyanmar
	ScriptBengali
	ScriptDeseret
	ScriptShavian
	ScriptDuployan
	ScriptGeorgian
	ScriptRunic
	ScriptGreek
	ScriptGujarati
	ScriptArmenian
	ScriptMahajani
	ScriptOgham
	ScriptSyriac
	ScriptHiragana
	ScriptKatakana
	ScriptJavanese
	ScriptKannada
	ScriptKhmer
	ScriptHangul
	ScriptMalayalam
	ScriptModi
	ScriptMongolian
	ScriptTirhuta
	ScriptElbasan
	ScriptGurmukhi
	ScriptSinhala
	ScriptOsmanya
	ScriptTamil
	ScriptThai
)

var (
	__sre_buf = []SRE{
		SRE{Evaluate: __sreEvalLatin, t: unicode.Latin},
		SRE{Evaluate: __sreEvalArabic, t: unicode.Arabic},
		SRE{Evaluate: __sreEvalCyrillic, t: unicode.Cyrillic},
		SRE{Evaluate: __sreEvalDevanagari, t: unicode.Devanagari},
		SRE{Evaluate: __sreEvalEthiopic, t: unicode.Ethiopic},
		SRE{Evaluate: __sreEvalHan, t: unicode.Han},
		SRE{Evaluate: __sreEvalTagalog, t: unicode.Tagalog},
		SRE{Evaluate: __sreEvalPhags_Pa, t: unicode.Phags_Pa},
		SRE{Evaluate: __sreEvalTelugu, t: unicode.Telugu},
		SRE{Evaluate: __sreEvalHebrew, t: unicode.Hebrew},
		SRE{Evaluate: __sreEvalBopomofo, t: unicode.Bopomofo},
		SRE{Evaluate: __sreEvalMyanmar, t: unicode.Myanmar},
		SRE{Evaluate: __sreEvalBengali, t: unicode.Bengali},
		SRE{Evaluate: __sreEvalDeseret, t: unicode.Deseret},
		SRE{Evaluate: __sreEvalShavian, t: unicode.Shavian},
		SRE{Evaluate: __sreEvalDuployan, t: unicode.Duployan},
		SRE{Evaluate: __sreEvalGeorgian, t: unicode.Georgian},
		SRE{Evaluate: __sreEvalRunic, t: unicode.Runic},
		SRE{Evaluate: __sreEvalGreek, t: unicode.Greek},
		SRE{Evaluate: __sreEvalGujarati, t: unicode.Gujarati},
		SRE{Evaluate: __sreEvalArmenian, t: unicode.Armenian},
		SRE{Evaluate: __sreEvalMahajani, t: unicode.Mahajani},
		SRE{Evaluate: __sreEvalOgham, t: unicode.Ogham},
		SRE{Evaluate: __sreEvalSyriac, t: unicode.Syriac},
		SRE{Evaluate: __sreEvalHiragana, t: unicode.Hiragana},
		SRE{Evaluate: __sreEvalKatakana, t: unicode.Katakana},
		SRE{Evaluate: __sreEvalJavanese, t: unicode.Javanese},
		SRE{Evaluate: __sreEvalKannada, t: unicode.Kannada},
		SRE{Evaluate: __sreEvalKhmer, t: unicode.Khmer},
		SRE{Evaluate: __sreEvalHangul, t: unicode.Hangul},
		SRE{Evaluate: __sreEvalMalayalam, t: unicode.Malayalam},
		SRE{Evaluate: __sreEvalModi, t: unicode.Modi},
		SRE{Evaluate: __sreEvalMongolian, t: unicode.Mongolian},
		SRE{Evaluate: __sreEvalTirhuta, t: unicode.Tirhuta},
		SRE{Evaluate: __sreEvalElbasan, t: unicode.Elbasan},
		SRE{Evaluate: __sreEvalGurmukhi, t: unicode.Gurmukhi},
		SRE{Evaluate: __sreEvalSinhala, t: unicode.Sinhala},
		SRE{Evaluate: __sreEvalOsmanya, t: unicode.Osmanya},
		SRE{Evaluate: __sreEvalTamil, t: unicode.Tamil},
		SRE{Evaluate: __sreEvalThai, t: unicode.Thai},
	}
	__sl_idx = []entry.Entry32{0x0000003d,
		0x003d004e,
		0x004e005d,
		0x005d0062,
		0x00620065,
		0x00650067,
		0x00670069,
		0x0069006b,
		0x006b006d,
		0x006d006f,
		0x006f0070,
		0x00700071,
		0x00710072,
		0x00720073,
		0x00730074,
		0x00740075,
		0x00750076,
		0x00760077,
		0x00770078,
		0x00780079,
		0x0079007a,
		0x007a007b,
		0x007b007c,
		0x007c007d,
		0x007d007e,
		0x007e007f,
		0x007f0080,
		0x00800081,
		0x00810082,
		0x00820083,
		0x00830084,
		0x00840085,
		0x00850086,
		0x00860087,
		0x00870088,
		0x00880089,
		0x0089008a,
		0x008a008b,
		0x008b008c,
		0x008c008d,
	}
	__sl_buf = []Language{
		LanguageAfrikaans,
		LanguageAkan,
		LanguageAlbanian,
		LanguageAzerbaijani,
		LanguageBasque,
		LanguageBosnian,
		LanguageCatalan,
		LanguageChewa,
		LanguageCroatian,
		LanguageCzech,
		LanguageDanish,
		LanguageDutch,
		LanguageEnglish,
		LanguageEsperanto,
		LanguageEstonian,
		LanguageFinnish,
		LanguageFrench,
		LanguageGerman,
		LanguageHaitian_Creole,
		LanguageHausa,
		LanguageHindi,
		LanguageHungarian,
		LanguageIndonesian,
		LanguageIgbo,
		LanguageIcelandic,
		LanguageIlocano,
		LanguageItalian,
		LanguageJavanese,
		LanguageKinyarwanda,
		LanguageLatin,
		LanguageGanda,
		LanguageLithuanian,
		LanguageLatvian,
		LanguageMalagasy,
		LanguageMalay,
		LanguageMaori,
		LanguageNorwegian_Bokmal,
		LanguageNorwegian_Nynorsk,
		LanguagePolish,
		LanguagePortuguese,
		LanguageKirundi,
		LanguageRomanian,
		LanguageSerbian,
		LanguageShona,
		LanguageSlovak,
		LanguageSlovenian,
		LanguageSomali,
		LanguageSotho,
		LanguageSpanish,
		LanguageSwahili,
		LanguageSwedish,
		LanguageTurkmen,
		LanguageTswana,
		LanguageTurkish,
		LanguageTsonga,
		LanguageUzbek,
		LanguageVietnamese,
		LanguageWelsh,
		LanguageXhosa,
		LanguageYoruba,
		LanguageZulu,
		LanguageArabic,
		LanguageAzerbaijani,
		LanguageHausa,
		LanguageIndonesian,
		LanguageKazakh,
		LanguageKurdish,
		LanguageGanda,
		LanguageMalay,
		LanguagePunjabi,
		LanguagePersian,
		LanguageSaraiki,
		LanguageSomali,
		LanguageTurkmen,
		LanguageTurkish,
		LanguageUyghur,
		LanguageUrdu,
		LanguageUzbek,
		LanguageAzerbaijani,
		LanguageBelarusian,
		LanguageBosnian,
		LanguageBulgarian,
		LanguageKazakh,
		LanguageKurdish,
		LanguageMacedonian,
		LanguageMongolian,
		LanguageRomanian,
		LanguageRussian,
		LanguageSerbian,
		LanguageTurkmen,
		LanguageUyghur,
		LanguageUkrainian,
		LanguageUzbek,
		LanguageBhojpuri,
		LanguageHindi,
		LanguageMarathi,
		LanguageMaithili,
		LanguageNepali,
		LanguageAmharic,
		LanguageOromo,
		LanguageTigrinya,
		LanguageChinese,
		LanguageVietnamese,
		LanguageIlocano,
		LanguageTagalog,
		LanguageChinese,
		LanguageMongolian,
		LanguageOriya,
		LanguageTelugu,
		LanguageHebrew,
		LanguageYiddish,
		LanguageChinese,
		LanguageBurmese,
		LanguageBengali,
		LanguageEnglish,
		LanguageEnglish,
		LanguageFrench,
		LanguageGeorgian,
		LanguageGerman,
		LanguageGreek,
		LanguageGujarati,
		LanguageArmenian,
		LanguageHindi,
		LanguageIrish,
		LanguageArabic,
		LanguageJapanese,
		LanguageJapanese,
		LanguageJavanese,
		LanguageKannada,
		LanguageKhmer,
		LanguageKorean,
		LanguageMalayalam,
		LanguageMarathi,
		LanguageMongolian,
		LanguageMaithili,
		LanguageAlbanian,
		LanguagePunjabi,
		LanguageSinhalese,
		LanguageSomali,
		LanguageTamil,
		LanguageThai,
	}
)

func __sreEvalLatin(r rune) bool {
	if r <= rune(0xff5a) {
		l16 := len(unicode.Latin.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0x0041 {
				return false
			}
			if r16 <= 0x005a {
				return true
			}
			if r16 < 0x0061 {
				return false
			}
			if r16 <= 0x007a {
				return true
			}
			if r16 < 0x00aa {
				return false
			}
			if r16 <= 0x00ba {
				return (r16-0x00aa)/0x0010 == 0
			}
			if r16 < 0x00c0 {
				return false
			}
			if r16 <= 0x00d6 {
				return true
			}
			if r16 < 0x00d8 {
				return false
			}
			if r16 <= 0x00f6 {
				return true
			}
			if r16 < 0x00f8 {
				return false
			}
			if r16 <= 0x02b8 {
				return true
			}
			if r16 < 0x02e0 {
				return false
			}
			if r16 <= 0x02e4 {
				return true
			}
			if r16 < 0x1d00 {
				return false
			}
			if r16 <= 0x1d25 {
				return true
			}
			if r16 < 0x1d2c {
				return false
			}
			if r16 <= 0x1d5c {
				return true
			}
			if r16 < 0x1d62 {
				return false
			}
			if r16 <= 0x1d65 {
				return true
			}
			if r16 < 0x1d6b {
				return false
			}
			if r16 <= 0x1d77 {
				return true
			}
			if r16 < 0x1d79 {
				return false
			}
			if r16 <= 0x1dbe {
				return true
			}
			if r16 < 0x1e00 {
				return false
			}
			if r16 <= 0x1eff {
				return true
			}
			if r16 < 0x2071 {
				return false
			}
			if r16 <= 0x207f {
				return (r16-0x2071)/0x000e == 0
			}
			if r16 < 0x2090 {
				return false
			}
			if r16 <= 0x209c {
				return true
			}
			if r16 < 0x212a {
				return false
			}
			if r16 <= 0x212b {
				return true
			}
			if r16 < 0x2132 {
				return false
			}
			if r16 <= 0x214e {
				return (r16-0x2132)/0x001c == 0
			}
			if r16 < 0x2160 {
				return false
			}
			if r16 <= 0x2188 {
				return true
			}
			if r16 < 0x2c60 {
				return false
			}
			if r16 <= 0x2c7f {
				return true
			}
			if r16 < 0xa722 {
				return false
			}
			if r16 <= 0xa787 {
				return true
			}
			if r16 < 0xa78b {
				return false
			}
			if r16 <= 0xa7bf {
				return true
			}
			if r16 < 0xa7c2 {
				return false
			}
			if r16 <= 0xa7ca {
				return true
			}
			if r16 < 0xa7f5 {
				return false
			}
			if r16 <= 0xa7ff {
				return true
			}
			if r16 < 0xab30 {
				return false
			}
			if r16 <= 0xab5a {
				return true
			}
			if r16 < 0xab5c {
				return false
			}
			if r16 <= 0xab64 {
				return true
			}
			if r16 < 0xab66 {
				return false
			}
			if r16 <= 0xab69 {
				return true
			}
			if r16 < 0xfb00 {
				return false
			}
			if r16 <= 0xfb06 {
				return true
			}
			if r16 < 0xff21 {
				return false
			}
			if r16 <= 0xff3a {
				return true
			}
			if r16 < 0xff41 {
				return false
			}
			if r16 <= 0xff5a {
				return true
			}
		}
		return sreEvalBinary16(unicode.Latin.R16, r16)
	}
	return false
}

func __sreEvalArabic(r rune) bool {
	if r <= rune(0xfefc) {
		l16 := len(unicode.Arabic.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0x0600 {
				return false
			}
			if r16 <= 0x0604 {
				return true
			}
			if r16 < 0x0606 {
				return false
			}
			if r16 <= 0x060b {
				return true
			}
			if r16 < 0x060d {
				return false
			}
			if r16 <= 0x061a {
				return true
			}
			if r16 < 0x061c {
				return false
			}
			if r16 <= 0x0620 {
				return (r16-0x061c)/0x0002 == 0
			}
			if r16 < 0x0621 {
				return false
			}
			if r16 <= 0x063f {
				return true
			}
			if r16 < 0x0641 {
				return false
			}
			if r16 <= 0x064a {
				return true
			}
			if r16 < 0x0656 {
				return false
			}
			if r16 <= 0x066f {
				return true
			}
			if r16 < 0x0671 {
				return false
			}
			if r16 <= 0x06dc {
				return true
			}
			if r16 < 0x06de {
				return false
			}
			if r16 <= 0x06ff {
				return true
			}
			if r16 < 0x0750 {
				return false
			}
			if r16 <= 0x077f {
				return true
			}
			if r16 < 0x08a0 {
				return false
			}
			if r16 <= 0x08b4 {
				return true
			}
			if r16 < 0x08b6 {
				return false
			}
			if r16 <= 0x08c7 {
				return true
			}
			if r16 < 0x08d3 {
				return false
			}
			if r16 <= 0x08e1 {
				return true
			}
			if r16 < 0x08e3 {
				return false
			}
			if r16 <= 0x08ff {
				return true
			}
			if r16 < 0xfb50 {
				return false
			}
			if r16 <= 0xfbc1 {
				return true
			}
			if r16 < 0xfbd3 {
				return false
			}
			if r16 <= 0xfd3d {
				return true
			}
			if r16 < 0xfd50 {
				return false
			}
			if r16 <= 0xfd8f {
				return true
			}
			if r16 < 0xfd92 {
				return false
			}
			if r16 <= 0xfdc7 {
				return true
			}
			if r16 < 0xfdf0 {
				return false
			}
			if r16 <= 0xfdfd {
				return true
			}
			if r16 < 0xfe70 {
				return false
			}
			if r16 <= 0xfe74 {
				return true
			}
			if r16 < 0xfe76 {
				return false
			}
			if r16 <= 0xfefc {
				return true
			}
		}
		return sreEvalBinary16(unicode.Arabic.R16, r16)
	}
	if r >= rune(0x10e60) {
		l32 := len(unicode.Arabic.R32)
		r32 := uint32(r)
		if l32 <= sreLinearMax {
			if r32 < 0x10e60 {
				return false
			}
			if r32 <= 0x10e7e {
				return true
			}
			if r32 < 0x1ee00 {
				return false
			}
			if r32 <= 0x1ee03 {
				return true
			}
			if r32 < 0x1ee05 {
				return false
			}
			if r32 <= 0x1ee1f {
				return true
			}
			if r32 < 0x1ee21 {
				return false
			}
			if r32 <= 0x1ee22 {
				return true
			}
			if r32 < 0x1ee24 {
				return false
			}
			if r32 <= 0x1ee27 {
				return (r32-0x1ee24)/0x00003 == 0
			}
			if r32 < 0x1ee29 {
				return false
			}
			if r32 <= 0x1ee32 {
				return true
			}
			if r32 < 0x1ee34 {
				return false
			}
			if r32 <= 0x1ee37 {
				return true
			}
			if r32 < 0x1ee39 {
				return false
			}
			if r32 <= 0x1ee3b {
				return (r32-0x1ee39)/0x00002 == 0
			}
			if r32 < 0x1ee42 {
				return false
			}
			if r32 <= 0x1ee47 {
				return (r32-0x1ee42)/0x00005 == 0
			}
			if r32 < 0x1ee49 {
				return false
			}
			if r32 <= 0x1ee4d {
				return (r32-0x1ee49)/0x00002 == 0
			}
			if r32 < 0x1ee4e {
				return false
			}
			if r32 <= 0x1ee4f {
				return true
			}
			if r32 < 0x1ee51 {
				return false
			}
			if r32 <= 0x1ee52 {
				return true
			}
			if r32 < 0x1ee54 {
				return false
			}
			if r32 <= 0x1ee57 {
				return (r32-0x1ee54)/0x00003 == 0
			}
			if r32 < 0x1ee59 {
				return false
			}
			if r32 <= 0x1ee61 {
				return (r32-0x1ee59)/0x00002 == 0
			}
			if r32 < 0x1ee62 {
				return false
			}
			if r32 <= 0x1ee64 {
				return (r32-0x1ee62)/0x00002 == 0
			}
			if r32 < 0x1ee67 {
				return false
			}
			if r32 <= 0x1ee6a {
				return true
			}
			if r32 < 0x1ee6c {
				return false
			}
			if r32 <= 0x1ee72 {
				return true
			}
			if r32 < 0x1ee74 {
				return false
			}
			if r32 <= 0x1ee77 {
				return true
			}
			if r32 < 0x1ee79 {
				return false
			}
			if r32 <= 0x1ee7c {
				return true
			}
			if r32 < 0x1ee7e {
				return false
			}
			if r32 <= 0x1ee80 {
				return (r32-0x1ee7e)/0x00002 == 0
			}
			if r32 < 0x1ee81 {
				return false
			}
			if r32 <= 0x1ee89 {
				return true
			}
			if r32 < 0x1ee8b {
				return false
			}
			if r32 <= 0x1ee9b {
				return true
			}
			if r32 < 0x1eea1 {
				return false
			}
			if r32 <= 0x1eea3 {
				return true
			}
			if r32 < 0x1eea5 {
				return false
			}
			if r32 <= 0x1eea9 {
				return true
			}
			if r32 < 0x1eeab {
				return false
			}
			if r32 <= 0x1eebb {
				return true
			}
			if r32 < 0x1eef0 {
				return false
			}
			if r32 <= 0x1eef1 {
				return true
			}
		}
		return sreEvalBinary32(unicode.Arabic.R32, r32)
	}
	return false
}

func __sreEvalCyrillic(r rune) bool {
	if r <= rune(0xfe2f) {
		l16 := len(unicode.Cyrillic.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0x0400 {
				return false
			}
			if r16 <= 0x0484 {
				return true
			}
			if r16 < 0x0487 {
				return false
			}
			if r16 <= 0x052f {
				return true
			}
			if r16 < 0x1c80 {
				return false
			}
			if r16 <= 0x1c88 {
				return true
			}
			if r16 < 0x1d2b {
				return false
			}
			if r16 <= 0x1d78 {
				return (r16-0x1d2b)/0x004d == 0
			}
			if r16 < 0x2de0 {
				return false
			}
			if r16 <= 0x2dff {
				return true
			}
			if r16 < 0xa640 {
				return false
			}
			if r16 <= 0xa69f {
				return true
			}
			if r16 < 0xfe2e {
				return false
			}
			if r16 <= 0xfe2f {
				return true
			}
		}
		return sreEvalBinary16(unicode.Cyrillic.R16, r16)
	}
	return false
}

func __sreEvalDevanagari(r rune) bool {
	if r <= rune(0xa8ff) {
		l16 := len(unicode.Devanagari.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0x0900 {
				return false
			}
			if r16 <= 0x0950 {
				return true
			}
			if r16 < 0x0955 {
				return false
			}
			if r16 <= 0x0963 {
				return true
			}
			if r16 < 0x0966 {
				return false
			}
			if r16 <= 0x097f {
				return true
			}
			if r16 < 0xa8e0 {
				return false
			}
			if r16 <= 0xa8ff {
				return true
			}
		}
		return sreEvalBinary16(unicode.Devanagari.R16, r16)
	}
	return false
}

func __sreEvalEthiopic(r rune) bool {
	if r <= rune(0xab2e) {
		l16 := len(unicode.Ethiopic.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0x1200 {
				return false
			}
			if r16 <= 0x1248 {
				return true
			}
			if r16 < 0x124a {
				return false
			}
			if r16 <= 0x124d {
				return true
			}
			if r16 < 0x1250 {
				return false
			}
			if r16 <= 0x1256 {
				return true
			}
			if r16 < 0x1258 {
				return false
			}
			if r16 <= 0x125a {
				return (r16-0x1258)/0x0002 == 0
			}
			if r16 < 0x125b {
				return false
			}
			if r16 <= 0x125d {
				return true
			}
			if r16 < 0x1260 {
				return false
			}
			if r16 <= 0x1288 {
				return true
			}
			if r16 < 0x128a {
				return false
			}
			if r16 <= 0x128d {
				return true
			}
			if r16 < 0x1290 {
				return false
			}
			if r16 <= 0x12b0 {
				return true
			}
			if r16 < 0x12b2 {
				return false
			}
			if r16 <= 0x12b5 {
				return true
			}
			if r16 < 0x12b8 {
				return false
			}
			if r16 <= 0x12be {
				return true
			}
			if r16 < 0x12c0 {
				return false
			}
			if r16 <= 0x12c2 {
				return (r16-0x12c0)/0x0002 == 0
			}
			if r16 < 0x12c3 {
				return false
			}
			if r16 <= 0x12c5 {
				return true
			}
			if r16 < 0x12c8 {
				return false
			}
			if r16 <= 0x12d6 {
				return true
			}
			if r16 < 0x12d8 {
				return false
			}
			if r16 <= 0x1310 {
				return true
			}
			if r16 < 0x1312 {
				return false
			}
			if r16 <= 0x1315 {
				return true
			}
			if r16 < 0x1318 {
				return false
			}
			if r16 <= 0x135a {
				return true
			}
			if r16 < 0x135d {
				return false
			}
			if r16 <= 0x137c {
				return true
			}
			if r16 < 0x1380 {
				return false
			}
			if r16 <= 0x1399 {
				return true
			}
			if r16 < 0x2d80 {
				return false
			}
			if r16 <= 0x2d96 {
				return true
			}
			if r16 < 0x2da0 {
				return false
			}
			if r16 <= 0x2da6 {
				return true
			}
			if r16 < 0x2da8 {
				return false
			}
			if r16 <= 0x2dae {
				return true
			}
			if r16 < 0x2db0 {
				return false
			}
			if r16 <= 0x2db6 {
				return true
			}
			if r16 < 0x2db8 {
				return false
			}
			if r16 <= 0x2dbe {
				return true
			}
			if r16 < 0x2dc0 {
				return false
			}
			if r16 <= 0x2dc6 {
				return true
			}
			if r16 < 0x2dc8 {
				return false
			}
			if r16 <= 0x2dce {
				return true
			}
			if r16 < 0x2dd0 {
				return false
			}
			if r16 <= 0x2dd6 {
				return true
			}
			if r16 < 0x2dd8 {
				return false
			}
			if r16 <= 0x2dde {
				return true
			}
			if r16 < 0xab01 {
				return false
			}
			if r16 <= 0xab06 {
				return true
			}
			if r16 < 0xab09 {
				return false
			}
			if r16 <= 0xab0e {
				return true
			}
			if r16 < 0xab11 {
				return false
			}
			if r16 <= 0xab16 {
				return true
			}
			if r16 < 0xab20 {
				return false
			}
			if r16 <= 0xab26 {
				return true
			}
			if r16 < 0xab28 {
				return false
			}
			if r16 <= 0xab2e {
				return true
			}
		}
		return sreEvalBinary16(unicode.Ethiopic.R16, r16)
	}
	return false
}

func __sreEvalHan(r rune) bool {
	if r <= rune(0xfad9) {
		l16 := len(unicode.Han.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0x2e80 {
				return false
			}
			if r16 <= 0x2e99 {
				return true
			}
			if r16 < 0x2e9b {
				return false
			}
			if r16 <= 0x2ef3 {
				return true
			}
			if r16 < 0x2f00 {
				return false
			}
			if r16 <= 0x2fd5 {
				return true
			}
			if r16 < 0x3005 {
				return false
			}
			if r16 <= 0x3007 {
				return (r16-0x3005)/0x0002 == 0
			}
			if r16 < 0x3021 {
				return false
			}
			if r16 <= 0x3029 {
				return true
			}
			if r16 < 0x3038 {
				return false
			}
			if r16 <= 0x303b {
				return true
			}
			if r16 < 0x3400 {
				return false
			}
			if r16 <= 0x4dbf {
				return true
			}
			if r16 < 0x4e00 {
				return false
			}
			if r16 <= 0x9ffc {
				return true
			}
			if r16 < 0xf900 {
				return false
			}
			if r16 <= 0xfa6d {
				return true
			}
			if r16 < 0xfa70 {
				return false
			}
			if r16 <= 0xfad9 {
				return true
			}
		}
		return sreEvalBinary16(unicode.Han.R16, r16)
	}
	if r >= rune(0x16ff0) {
		l32 := len(unicode.Han.R32)
		r32 := uint32(r)
		if l32 <= sreLinearMax {
			if r32 < 0x16ff0 {
				return false
			}
			if r32 <= 0x16ff1 {
				return true
			}
			if r32 < 0x20000 {
				return false
			}
			if r32 <= 0x2a6dd {
				return true
			}
			if r32 < 0x2a700 {
				return false
			}
			if r32 <= 0x2b734 {
				return true
			}
			if r32 < 0x2b740 {
				return false
			}
			if r32 <= 0x2b81d {
				return true
			}
			if r32 < 0x2b820 {
				return false
			}
			if r32 <= 0x2cea1 {
				return true
			}
			if r32 < 0x2ceb0 {
				return false
			}
			if r32 <= 0x2ebe0 {
				return true
			}
			if r32 < 0x2f800 {
				return false
			}
			if r32 <= 0x2fa1d {
				return true
			}
			if r32 < 0x30000 {
				return false
			}
			if r32 <= 0x3134a {
				return true
			}
		}
		return sreEvalBinary32(unicode.Han.R32, r32)
	}
	return false
}

func __sreEvalTagalog(r rune) bool {
	if r <= rune(0x1714) {
		l16 := len(unicode.Tagalog.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0x1700 {
				return false
			}
			if r16 <= 0x170c {
				return true
			}
			if r16 < 0x170e {
				return false
			}
			if r16 <= 0x1714 {
				return true
			}
		}
		return sreEvalBinary16(unicode.Tagalog.R16, r16)
	}
	return false
}

func __sreEvalPhags_Pa(r rune) bool {
	if r <= rune(0xa877) {
		l16 := len(unicode.Phags_Pa.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0xa840 {
				return false
			}
			if r16 <= 0xa877 {
				return true
			}
		}
		return sreEvalBinary16(unicode.Phags_Pa.R16, r16)
	}
	return false
}

func __sreEvalTelugu(r rune) bool {
	if r <= rune(0x0c7f) {
		l16 := len(unicode.Telugu.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0x0c00 {
				return false
			}
			if r16 <= 0x0c0c {
				return true
			}
			if r16 < 0x0c0e {
				return false
			}
			if r16 <= 0x0c10 {
				return true
			}
			if r16 < 0x0c12 {
				return false
			}
			if r16 <= 0x0c28 {
				return true
			}
			if r16 < 0x0c2a {
				return false
			}
			if r16 <= 0x0c39 {
				return true
			}
			if r16 < 0x0c3d {
				return false
			}
			if r16 <= 0x0c44 {
				return true
			}
			if r16 < 0x0c46 {
				return false
			}
			if r16 <= 0x0c48 {
				return true
			}
			if r16 < 0x0c4a {
				return false
			}
			if r16 <= 0x0c4d {
				return true
			}
			if r16 < 0x0c55 {
				return false
			}
			if r16 <= 0x0c56 {
				return true
			}
			if r16 < 0x0c58 {
				return false
			}
			if r16 <= 0x0c5a {
				return true
			}
			if r16 < 0x0c60 {
				return false
			}
			if r16 <= 0x0c63 {
				return true
			}
			if r16 < 0x0c66 {
				return false
			}
			if r16 <= 0x0c6f {
				return true
			}
			if r16 < 0x0c77 {
				return false
			}
			if r16 <= 0x0c7f {
				return true
			}
		}
		return sreEvalBinary16(unicode.Telugu.R16, r16)
	}
	return false
}

func __sreEvalHebrew(r rune) bool {
	if r <= rune(0xfb4f) {
		l16 := len(unicode.Hebrew.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0x0591 {
				return false
			}
			if r16 <= 0x05c7 {
				return true
			}
			if r16 < 0x05d0 {
				return false
			}
			if r16 <= 0x05ea {
				return true
			}
			if r16 < 0x05ef {
				return false
			}
			if r16 <= 0x05f4 {
				return true
			}
			if r16 < 0xfb1d {
				return false
			}
			if r16 <= 0xfb36 {
				return true
			}
			if r16 < 0xfb38 {
				return false
			}
			if r16 <= 0xfb3c {
				return true
			}
			if r16 < 0xfb3e {
				return false
			}
			if r16 <= 0xfb40 {
				return (r16-0xfb3e)/0x0002 == 0
			}
			if r16 < 0xfb41 {
				return false
			}
			if r16 <= 0xfb43 {
				return (r16-0xfb41)/0x0002 == 0
			}
			if r16 < 0xfb44 {
				return false
			}
			if r16 <= 0xfb46 {
				return (r16-0xfb44)/0x0002 == 0
			}
			if r16 < 0xfb47 {
				return false
			}
			if r16 <= 0xfb4f {
				return true
			}
		}
		return sreEvalBinary16(unicode.Hebrew.R16, r16)
	}
	return false
}

func __sreEvalBopomofo(r rune) bool {
	if r <= rune(0x31bf) {
		l16 := len(unicode.Bopomofo.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0x02ea {
				return false
			}
			if r16 <= 0x02eb {
				return true
			}
			if r16 < 0x3105 {
				return false
			}
			if r16 <= 0x312f {
				return true
			}
			if r16 < 0x31a0 {
				return false
			}
			if r16 <= 0x31bf {
				return true
			}
		}
		return sreEvalBinary16(unicode.Bopomofo.R16, r16)
	}
	return false
}

func __sreEvalMyanmar(r rune) bool {
	if r <= rune(0xaa7f) {
		l16 := len(unicode.Myanmar.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0x1000 {
				return false
			}
			if r16 <= 0x109f {
				return true
			}
			if r16 < 0xa9e0 {
				return false
			}
			if r16 <= 0xa9fe {
				return true
			}
			if r16 < 0xaa60 {
				return false
			}
			if r16 <= 0xaa7f {
				return true
			}
		}
		return sreEvalBinary16(unicode.Myanmar.R16, r16)
	}
	return false
}

func __sreEvalBengali(r rune) bool {
	if r <= rune(0x09fe) {
		l16 := len(unicode.Bengali.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0x0980 {
				return false
			}
			if r16 <= 0x0983 {
				return true
			}
			if r16 < 0x0985 {
				return false
			}
			if r16 <= 0x098c {
				return true
			}
			if r16 < 0x098f {
				return false
			}
			if r16 <= 0x0990 {
				return true
			}
			if r16 < 0x0993 {
				return false
			}
			if r16 <= 0x09a8 {
				return true
			}
			if r16 < 0x09aa {
				return false
			}
			if r16 <= 0x09b0 {
				return true
			}
			if r16 < 0x09b2 {
				return false
			}
			if r16 <= 0x09b6 {
				return (r16-0x09b2)/0x0004 == 0
			}
			if r16 < 0x09b7 {
				return false
			}
			if r16 <= 0x09b9 {
				return true
			}
			if r16 < 0x09bc {
				return false
			}
			if r16 <= 0x09c4 {
				return true
			}
			if r16 < 0x09c7 {
				return false
			}
			if r16 <= 0x09c8 {
				return true
			}
			if r16 < 0x09cb {
				return false
			}
			if r16 <= 0x09ce {
				return true
			}
			if r16 < 0x09d7 {
				return false
			}
			if r16 <= 0x09dc {
				return (r16-0x09d7)/0x0005 == 0
			}
			if r16 < 0x09dd {
				return false
			}
			if r16 <= 0x09df {
				return (r16-0x09dd)/0x0002 == 0
			}
			if r16 < 0x09e0 {
				return false
			}
			if r16 <= 0x09e3 {
				return true
			}
			if r16 < 0x09e6 {
				return false
			}
			if r16 <= 0x09fe {
				return true
			}
		}
		return sreEvalBinary16(unicode.Bengali.R16, r16)
	}
	return false
}

func __sreEvalDeseret(r rune) bool {
	if r >= rune(0x10400) {
		l32 := len(unicode.Deseret.R32)
		r32 := uint32(r)
		if l32 <= sreLinearMax {
			if r32 < 0x10400 {
				return false
			}
			if r32 <= 0x1044f {
				return true
			}
		}
		return sreEvalBinary32(unicode.Deseret.R32, r32)
	}
	return false
}

func __sreEvalShavian(r rune) bool {
	if r >= rune(0x10450) {
		l32 := len(unicode.Shavian.R32)
		r32 := uint32(r)
		if l32 <= sreLinearMax {
			if r32 < 0x10450 {
				return false
			}
			if r32 <= 0x1047f {
				return true
			}
		}
		return sreEvalBinary32(unicode.Shavian.R32, r32)
	}
	return false
}

func __sreEvalDuployan(r rune) bool {
	if r >= rune(0x1bc00) {
		l32 := len(unicode.Duployan.R32)
		r32 := uint32(r)
		if l32 <= sreLinearMax {
			if r32 < 0x1bc00 {
				return false
			}
			if r32 <= 0x1bc6a {
				return true
			}
			if r32 < 0x1bc70 {
				return false
			}
			if r32 <= 0x1bc7c {
				return true
			}
			if r32 < 0x1bc80 {
				return false
			}
			if r32 <= 0x1bc88 {
				return true
			}
			if r32 < 0x1bc90 {
				return false
			}
			if r32 <= 0x1bc99 {
				return true
			}
			if r32 < 0x1bc9c {
				return false
			}
			if r32 <= 0x1bc9f {
				return true
			}
		}
		return sreEvalBinary32(unicode.Duployan.R32, r32)
	}
	return false
}

func __sreEvalGeorgian(r rune) bool {
	if r <= rune(0x2d2d) {
		l16 := len(unicode.Georgian.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0x10a0 {
				return false
			}
			if r16 <= 0x10c5 {
				return true
			}
			if r16 < 0x10c7 {
				return false
			}
			if r16 <= 0x10cd {
				return (r16-0x10c7)/0x0006 == 0
			}
			if r16 < 0x10d0 {
				return false
			}
			if r16 <= 0x10fa {
				return true
			}
			if r16 < 0x10fc {
				return false
			}
			if r16 <= 0x10ff {
				return true
			}
			if r16 < 0x1c90 {
				return false
			}
			if r16 <= 0x1cba {
				return true
			}
			if r16 < 0x1cbd {
				return false
			}
			if r16 <= 0x1cbf {
				return true
			}
			if r16 < 0x2d00 {
				return false
			}
			if r16 <= 0x2d25 {
				return true
			}
			if r16 < 0x2d27 {
				return false
			}
			if r16 <= 0x2d2d {
				return (r16-0x2d27)/0x0006 == 0
			}
		}
		return sreEvalBinary16(unicode.Georgian.R16, r16)
	}
	return false
}

func __sreEvalRunic(r rune) bool {
	if r <= rune(0x16f8) {
		l16 := len(unicode.Runic.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0x16a0 {
				return false
			}
			if r16 <= 0x16ea {
				return true
			}
			if r16 < 0x16ee {
				return false
			}
			if r16 <= 0x16f8 {
				return true
			}
		}
		return sreEvalBinary16(unicode.Runic.R16, r16)
	}
	return false
}

func __sreEvalGreek(r rune) bool {
	if r <= rune(0xab65) {
		l16 := len(unicode.Greek.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0x0370 {
				return false
			}
			if r16 <= 0x0373 {
				return true
			}
			if r16 < 0x0375 {
				return false
			}
			if r16 <= 0x0377 {
				return true
			}
			if r16 < 0x037a {
				return false
			}
			if r16 <= 0x037d {
				return true
			}
			if r16 < 0x037f {
				return false
			}
			if r16 <= 0x0384 {
				return (r16-0x037f)/0x0005 == 0
			}
			if r16 < 0x0386 {
				return false
			}
			if r16 <= 0x0388 {
				return (r16-0x0386)/0x0002 == 0
			}
			if r16 < 0x0389 {
				return false
			}
			if r16 <= 0x038a {
				return true
			}
			if r16 < 0x038c {
				return false
			}
			if r16 <= 0x038e {
				return (r16-0x038c)/0x0002 == 0
			}
			if r16 < 0x038f {
				return false
			}
			if r16 <= 0x03a1 {
				return true
			}
			if r16 < 0x03a3 {
				return false
			}
			if r16 <= 0x03e1 {
				return true
			}
			if r16 < 0x03f0 {
				return false
			}
			if r16 <= 0x03ff {
				return true
			}
			if r16 < 0x1d26 {
				return false
			}
			if r16 <= 0x1d2a {
				return true
			}
			if r16 < 0x1d5d {
				return false
			}
			if r16 <= 0x1d61 {
				return true
			}
			if r16 < 0x1d66 {
				return false
			}
			if r16 <= 0x1d6a {
				return true
			}
			if r16 < 0x1dbf {
				return false
			}
			if r16 <= 0x1f00 {
				return (r16-0x1dbf)/0x0141 == 0
			}
			if r16 < 0x1f01 {
				return false
			}
			if r16 <= 0x1f15 {
				return true
			}
			if r16 < 0x1f18 {
				return false
			}
			if r16 <= 0x1f1d {
				return true
			}
			if r16 < 0x1f20 {
				return false
			}
			if r16 <= 0x1f45 {
				return true
			}
			if r16 < 0x1f48 {
				return false
			}
			if r16 <= 0x1f4d {
				return true
			}
			if r16 < 0x1f50 {
				return false
			}
			if r16 <= 0x1f57 {
				return true
			}
			if r16 < 0x1f59 {
				return false
			}
			if r16 <= 0x1f5f {
				return (r16-0x1f59)/0x0002 == 0
			}
			if r16 < 0x1f60 {
				return false
			}
			if r16 <= 0x1f7d {
				return true
			}
			if r16 < 0x1f80 {
				return false
			}
			if r16 <= 0x1fb4 {
				return true
			}
			if r16 < 0x1fb6 {
				return false
			}
			if r16 <= 0x1fc4 {
				return true
			}
			if r16 < 0x1fc6 {
				return false
			}
			if r16 <= 0x1fd3 {
				return true
			}
			if r16 < 0x1fd6 {
				return false
			}
			if r16 <= 0x1fdb {
				return true
			}
			if r16 < 0x1fdd {
				return false
			}
			if r16 <= 0x1fef {
				return true
			}
			if r16 < 0x1ff2 {
				return false
			}
			if r16 <= 0x1ff4 {
				return true
			}
			if r16 < 0x1ff6 {
				return false
			}
			if r16 <= 0x1ffe {
				return true
			}
			if r16 < 0x2126 {
				return false
			}
			if r16 <= 0xab65 {
				return (r16-0x2126)/0x8a3f == 0
			}
		}
		return sreEvalBinary16(unicode.Greek.R16, r16)
	}
	if r >= rune(0x10140) {
		l32 := len(unicode.Greek.R32)
		r32 := uint32(r)
		if l32 <= sreLinearMax {
			if r32 < 0x10140 {
				return false
			}
			if r32 <= 0x1018e {
				return true
			}
			if r32 < 0x101a0 {
				return false
			}
			if r32 <= 0x1d200 {
				return (r32-0x101a0)/0x0d060 == 0
			}
			if r32 < 0x1d201 {
				return false
			}
			if r32 <= 0x1d245 {
				return true
			}
		}
		return sreEvalBinary32(unicode.Greek.R32, r32)
	}
	return false
}

func __sreEvalGujarati(r rune) bool {
	if r <= rune(0x0aff) {
		l16 := len(unicode.Gujarati.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0x0a81 {
				return false
			}
			if r16 <= 0x0a83 {
				return true
			}
			if r16 < 0x0a85 {
				return false
			}
			if r16 <= 0x0a8d {
				return true
			}
			if r16 < 0x0a8f {
				return false
			}
			if r16 <= 0x0a91 {
				return true
			}
			if r16 < 0x0a93 {
				return false
			}
			if r16 <= 0x0aa8 {
				return true
			}
			if r16 < 0x0aaa {
				return false
			}
			if r16 <= 0x0ab0 {
				return true
			}
			if r16 < 0x0ab2 {
				return false
			}
			if r16 <= 0x0ab3 {
				return true
			}
			if r16 < 0x0ab5 {
				return false
			}
			if r16 <= 0x0ab9 {
				return true
			}
			if r16 < 0x0abc {
				return false
			}
			if r16 <= 0x0ac5 {
				return true
			}
			if r16 < 0x0ac7 {
				return false
			}
			if r16 <= 0x0ac9 {
				return true
			}
			if r16 < 0x0acb {
				return false
			}
			if r16 <= 0x0acd {
				return true
			}
			if r16 < 0x0ad0 {
				return false
			}
			if r16 <= 0x0ae0 {
				return (r16-0x0ad0)/0x0010 == 0
			}
			if r16 < 0x0ae1 {
				return false
			}
			if r16 <= 0x0ae3 {
				return true
			}
			if r16 < 0x0ae6 {
				return false
			}
			if r16 <= 0x0af1 {
				return true
			}
			if r16 < 0x0af9 {
				return false
			}
			if r16 <= 0x0aff {
				return true
			}
		}
		return sreEvalBinary16(unicode.Gujarati.R16, r16)
	}
	return false
}

func __sreEvalArmenian(r rune) bool {
	if r <= rune(0xfb17) {
		l16 := len(unicode.Armenian.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0x0531 {
				return false
			}
			if r16 <= 0x0556 {
				return true
			}
			if r16 < 0x0559 {
				return false
			}
			if r16 <= 0x058a {
				return true
			}
			if r16 < 0x058d {
				return false
			}
			if r16 <= 0x058f {
				return true
			}
			if r16 < 0xfb13 {
				return false
			}
			if r16 <= 0xfb17 {
				return true
			}
		}
		return sreEvalBinary16(unicode.Armenian.R16, r16)
	}
	return false
}

func __sreEvalMahajani(r rune) bool {
	if r >= rune(0x11150) {
		l32 := len(unicode.Mahajani.R32)
		r32 := uint32(r)
		if l32 <= sreLinearMax {
			if r32 < 0x11150 {
				return false
			}
			if r32 <= 0x11176 {
				return true
			}
		}
		return sreEvalBinary32(unicode.Mahajani.R32, r32)
	}
	return false
}

func __sreEvalOgham(r rune) bool {
	if r <= rune(0x169c) {
		l16 := len(unicode.Ogham.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0x1680 {
				return false
			}
			if r16 <= 0x169c {
				return true
			}
		}
		return sreEvalBinary16(unicode.Ogham.R16, r16)
	}
	return false
}

func __sreEvalSyriac(r rune) bool {
	if r <= rune(0x086a) {
		l16 := len(unicode.Syriac.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0x0700 {
				return false
			}
			if r16 <= 0x070d {
				return true
			}
			if r16 < 0x070f {
				return false
			}
			if r16 <= 0x074a {
				return true
			}
			if r16 < 0x074d {
				return false
			}
			if r16 <= 0x074f {
				return true
			}
			if r16 < 0x0860 {
				return false
			}
			if r16 <= 0x086a {
				return true
			}
		}
		return sreEvalBinary16(unicode.Syriac.R16, r16)
	}
	return false
}

func __sreEvalHiragana(r rune) bool {
	if r <= rune(0x309f) {
		l16 := len(unicode.Hiragana.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0x3041 {
				return false
			}
			if r16 <= 0x3096 {
				return true
			}
			if r16 < 0x309d {
				return false
			}
			if r16 <= 0x309f {
				return true
			}
		}
		return sreEvalBinary16(unicode.Hiragana.R16, r16)
	}
	if r >= rune(0x1b001) {
		l32 := len(unicode.Hiragana.R32)
		r32 := uint32(r)
		if l32 <= sreLinearMax {
			if r32 < 0x1b001 {
				return false
			}
			if r32 <= 0x1b11e {
				return true
			}
			if r32 < 0x1b150 {
				return false
			}
			if r32 <= 0x1b152 {
				return true
			}
			if r32 < 0x1f200 {
				return false
			}
			if r32 <= 0x1f200 {
				return true
			}
		}
		return sreEvalBinary32(unicode.Hiragana.R32, r32)
	}
	return false
}

func __sreEvalKatakana(r rune) bool {
	if r <= rune(0xff9d) {
		l16 := len(unicode.Katakana.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0x30a1 {
				return false
			}
			if r16 <= 0x30fa {
				return true
			}
			if r16 < 0x30fd {
				return false
			}
			if r16 <= 0x30ff {
				return true
			}
			if r16 < 0x31f0 {
				return false
			}
			if r16 <= 0x31ff {
				return true
			}
			if r16 < 0x32d0 {
				return false
			}
			if r16 <= 0x32fe {
				return true
			}
			if r16 < 0x3300 {
				return false
			}
			if r16 <= 0x3357 {
				return true
			}
			if r16 < 0xff66 {
				return false
			}
			if r16 <= 0xff6f {
				return true
			}
			if r16 < 0xff71 {
				return false
			}
			if r16 <= 0xff9d {
				return true
			}
		}
		return sreEvalBinary16(unicode.Katakana.R16, r16)
	}
	if r >= rune(0x1b000) {
		l32 := len(unicode.Katakana.R32)
		r32 := uint32(r)
		if l32 <= sreLinearMax {
			if r32 < 0x1b000 {
				return false
			}
			if r32 <= 0x1b164 {
				return (r32-0x1b000)/0x00164 == 0
			}
			if r32 < 0x1b165 {
				return false
			}
			if r32 <= 0x1b167 {
				return true
			}
		}
		return sreEvalBinary32(unicode.Katakana.R32, r32)
	}
	return false
}

func __sreEvalJavanese(r rune) bool {
	if r <= rune(0xa9df) {
		l16 := len(unicode.Javanese.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0xa980 {
				return false
			}
			if r16 <= 0xa9cd {
				return true
			}
			if r16 < 0xa9d0 {
				return false
			}
			if r16 <= 0xa9d9 {
				return true
			}
			if r16 < 0xa9de {
				return false
			}
			if r16 <= 0xa9df {
				return true
			}
		}
		return sreEvalBinary16(unicode.Javanese.R16, r16)
	}
	return false
}

func __sreEvalKannada(r rune) bool {
	if r <= rune(0x0cf2) {
		l16 := len(unicode.Kannada.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0x0c80 {
				return false
			}
			if r16 <= 0x0c8c {
				return true
			}
			if r16 < 0x0c8e {
				return false
			}
			if r16 <= 0x0c90 {
				return true
			}
			if r16 < 0x0c92 {
				return false
			}
			if r16 <= 0x0ca8 {
				return true
			}
			if r16 < 0x0caa {
				return false
			}
			if r16 <= 0x0cb3 {
				return true
			}
			if r16 < 0x0cb5 {
				return false
			}
			if r16 <= 0x0cb9 {
				return true
			}
			if r16 < 0x0cbc {
				return false
			}
			if r16 <= 0x0cc4 {
				return true
			}
			if r16 < 0x0cc6 {
				return false
			}
			if r16 <= 0x0cc8 {
				return true
			}
			if r16 < 0x0cca {
				return false
			}
			if r16 <= 0x0ccd {
				return true
			}
			if r16 < 0x0cd5 {
				return false
			}
			if r16 <= 0x0cd6 {
				return true
			}
			if r16 < 0x0cde {
				return false
			}
			if r16 <= 0x0ce0 {
				return (r16-0x0cde)/0x0002 == 0
			}
			if r16 < 0x0ce1 {
				return false
			}
			if r16 <= 0x0ce3 {
				return true
			}
			if r16 < 0x0ce6 {
				return false
			}
			if r16 <= 0x0cef {
				return true
			}
			if r16 < 0x0cf1 {
				return false
			}
			if r16 <= 0x0cf2 {
				return true
			}
		}
		return sreEvalBinary16(unicode.Kannada.R16, r16)
	}
	return false
}

func __sreEvalKhmer(r rune) bool {
	if r <= rune(0x19ff) {
		l16 := len(unicode.Khmer.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0x1780 {
				return false
			}
			if r16 <= 0x17dd {
				return true
			}
			if r16 < 0x17e0 {
				return false
			}
			if r16 <= 0x17e9 {
				return true
			}
			if r16 < 0x17f0 {
				return false
			}
			if r16 <= 0x17f9 {
				return true
			}
			if r16 < 0x19e0 {
				return false
			}
			if r16 <= 0x19ff {
				return true
			}
		}
		return sreEvalBinary16(unicode.Khmer.R16, r16)
	}
	return false
}

func __sreEvalHangul(r rune) bool {
	if r <= rune(0xffdc) {
		l16 := len(unicode.Hangul.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0x1100 {
				return false
			}
			if r16 <= 0x11ff {
				return true
			}
			if r16 < 0x302e {
				return false
			}
			if r16 <= 0x302f {
				return true
			}
			if r16 < 0x3131 {
				return false
			}
			if r16 <= 0x318e {
				return true
			}
			if r16 < 0x3200 {
				return false
			}
			if r16 <= 0x321e {
				return true
			}
			if r16 < 0x3260 {
				return false
			}
			if r16 <= 0x327e {
				return true
			}
			if r16 < 0xa960 {
				return false
			}
			if r16 <= 0xa97c {
				return true
			}
			if r16 < 0xac00 {
				return false
			}
			if r16 <= 0xd7a3 {
				return true
			}
			if r16 < 0xd7b0 {
				return false
			}
			if r16 <= 0xd7c6 {
				return true
			}
			if r16 < 0xd7cb {
				return false
			}
			if r16 <= 0xd7fb {
				return true
			}
			if r16 < 0xffa0 {
				return false
			}
			if r16 <= 0xffbe {
				return true
			}
			if r16 < 0xffc2 {
				return false
			}
			if r16 <= 0xffc7 {
				return true
			}
			if r16 < 0xffca {
				return false
			}
			if r16 <= 0xffcf {
				return true
			}
			if r16 < 0xffd2 {
				return false
			}
			if r16 <= 0xffd7 {
				return true
			}
			if r16 < 0xffda {
				return false
			}
			if r16 <= 0xffdc {
				return true
			}
		}
		return sreEvalBinary16(unicode.Hangul.R16, r16)
	}
	return false
}

func __sreEvalMalayalam(r rune) bool {
	if r <= rune(0x0d7f) {
		l16 := len(unicode.Malayalam.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0x0d00 {
				return false
			}
			if r16 <= 0x0d0c {
				return true
			}
			if r16 < 0x0d0e {
				return false
			}
			if r16 <= 0x0d10 {
				return true
			}
			if r16 < 0x0d12 {
				return false
			}
			if r16 <= 0x0d44 {
				return true
			}
			if r16 < 0x0d46 {
				return false
			}
			if r16 <= 0x0d48 {
				return true
			}
			if r16 < 0x0d4a {
				return false
			}
			if r16 <= 0x0d4f {
				return true
			}
			if r16 < 0x0d54 {
				return false
			}
			if r16 <= 0x0d63 {
				return true
			}
			if r16 < 0x0d66 {
				return false
			}
			if r16 <= 0x0d7f {
				return true
			}
		}
		return sreEvalBinary16(unicode.Malayalam.R16, r16)
	}
	return false
}

func __sreEvalModi(r rune) bool {
	if r >= rune(0x11600) {
		l32 := len(unicode.Modi.R32)
		r32 := uint32(r)
		if l32 <= sreLinearMax {
			if r32 < 0x11600 {
				return false
			}
			if r32 <= 0x11644 {
				return true
			}
			if r32 < 0x11650 {
				return false
			}
			if r32 <= 0x11659 {
				return true
			}
		}
		return sreEvalBinary32(unicode.Modi.R32, r32)
	}
	return false
}

func __sreEvalMongolian(r rune) bool {
	if r <= rune(0x18aa) {
		l16 := len(unicode.Mongolian.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0x1800 {
				return false
			}
			if r16 <= 0x1801 {
				return true
			}
			if r16 < 0x1804 {
				return false
			}
			if r16 <= 0x1806 {
				return (r16-0x1804)/0x0002 == 0
			}
			if r16 < 0x1807 {
				return false
			}
			if r16 <= 0x180e {
				return true
			}
			if r16 < 0x1810 {
				return false
			}
			if r16 <= 0x1819 {
				return true
			}
			if r16 < 0x1820 {
				return false
			}
			if r16 <= 0x1878 {
				return true
			}
			if r16 < 0x1880 {
				return false
			}
			if r16 <= 0x18aa {
				return true
			}
		}
		return sreEvalBinary16(unicode.Mongolian.R16, r16)
	}
	if r >= rune(0x11660) {
		l32 := len(unicode.Mongolian.R32)
		r32 := uint32(r)
		if l32 <= sreLinearMax {
			if r32 < 0x11660 {
				return false
			}
			if r32 <= 0x1166c {
				return true
			}
		}
		return sreEvalBinary32(unicode.Mongolian.R32, r32)
	}
	return false
}

func __sreEvalTirhuta(r rune) bool {
	if r >= rune(0x11480) {
		l32 := len(unicode.Tirhuta.R32)
		r32 := uint32(r)
		if l32 <= sreLinearMax {
			if r32 < 0x11480 {
				return false
			}
			if r32 <= 0x114c7 {
				return true
			}
			if r32 < 0x114d0 {
				return false
			}
			if r32 <= 0x114d9 {
				return true
			}
		}
		return sreEvalBinary32(unicode.Tirhuta.R32, r32)
	}
	return false
}

func __sreEvalElbasan(r rune) bool {
	if r >= rune(0x10500) {
		l32 := len(unicode.Elbasan.R32)
		r32 := uint32(r)
		if l32 <= sreLinearMax {
			if r32 < 0x10500 {
				return false
			}
			if r32 <= 0x10527 {
				return true
			}
		}
		return sreEvalBinary32(unicode.Elbasan.R32, r32)
	}
	return false
}

func __sreEvalGurmukhi(r rune) bool {
	if r <= rune(0x0a76) {
		l16 := len(unicode.Gurmukhi.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0x0a01 {
				return false
			}
			if r16 <= 0x0a03 {
				return true
			}
			if r16 < 0x0a05 {
				return false
			}
			if r16 <= 0x0a0a {
				return true
			}
			if r16 < 0x0a0f {
				return false
			}
			if r16 <= 0x0a10 {
				return true
			}
			if r16 < 0x0a13 {
				return false
			}
			if r16 <= 0x0a28 {
				return true
			}
			if r16 < 0x0a2a {
				return false
			}
			if r16 <= 0x0a30 {
				return true
			}
			if r16 < 0x0a32 {
				return false
			}
			if r16 <= 0x0a33 {
				return true
			}
			if r16 < 0x0a35 {
				return false
			}
			if r16 <= 0x0a36 {
				return true
			}
			if r16 < 0x0a38 {
				return false
			}
			if r16 <= 0x0a39 {
				return true
			}
			if r16 < 0x0a3c {
				return false
			}
			if r16 <= 0x0a3e {
				return (r16-0x0a3c)/0x0002 == 0
			}
			if r16 < 0x0a3f {
				return false
			}
			if r16 <= 0x0a42 {
				return true
			}
			if r16 < 0x0a47 {
				return false
			}
			if r16 <= 0x0a48 {
				return true
			}
			if r16 < 0x0a4b {
				return false
			}
			if r16 <= 0x0a4d {
				return true
			}
			if r16 < 0x0a51 {
				return false
			}
			if r16 <= 0x0a59 {
				return (r16-0x0a51)/0x0008 == 0
			}
			if r16 < 0x0a5a {
				return false
			}
			if r16 <= 0x0a5c {
				return true
			}
			if r16 < 0x0a5e {
				return false
			}
			if r16 <= 0x0a66 {
				return (r16-0x0a5e)/0x0008 == 0
			}
			if r16 < 0x0a67 {
				return false
			}
			if r16 <= 0x0a76 {
				return true
			}
		}
		return sreEvalBinary16(unicode.Gurmukhi.R16, r16)
	}
	return false
}

func __sreEvalSinhala(r rune) bool {
	if r <= rune(0x0df4) {
		l16 := len(unicode.Sinhala.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0x0d81 {
				return false
			}
			if r16 <= 0x0d83 {
				return true
			}
			if r16 < 0x0d85 {
				return false
			}
			if r16 <= 0x0d96 {
				return true
			}
			if r16 < 0x0d9a {
				return false
			}
			if r16 <= 0x0db1 {
				return true
			}
			if r16 < 0x0db3 {
				return false
			}
			if r16 <= 0x0dbb {
				return true
			}
			if r16 < 0x0dbd {
				return false
			}
			if r16 <= 0x0dc0 {
				return (r16-0x0dbd)/0x0003 == 0
			}
			if r16 < 0x0dc1 {
				return false
			}
			if r16 <= 0x0dc6 {
				return true
			}
			if r16 < 0x0dca {
				return false
			}
			if r16 <= 0x0dcf {
				return (r16-0x0dca)/0x0005 == 0
			}
			if r16 < 0x0dd0 {
				return false
			}
			if r16 <= 0x0dd4 {
				return true
			}
			if r16 < 0x0dd6 {
				return false
			}
			if r16 <= 0x0dd8 {
				return (r16-0x0dd6)/0x0002 == 0
			}
			if r16 < 0x0dd9 {
				return false
			}
			if r16 <= 0x0ddf {
				return true
			}
			if r16 < 0x0de6 {
				return false
			}
			if r16 <= 0x0def {
				return true
			}
			if r16 < 0x0df2 {
				return false
			}
			if r16 <= 0x0df4 {
				return true
			}
		}
		return sreEvalBinary16(unicode.Sinhala.R16, r16)
	}
	if r >= rune(0x111e1) {
		l32 := len(unicode.Sinhala.R32)
		r32 := uint32(r)
		if l32 <= sreLinearMax {
			if r32 < 0x111e1 {
				return false
			}
			if r32 <= 0x111f4 {
				return true
			}
		}
		return sreEvalBinary32(unicode.Sinhala.R32, r32)
	}
	return false
}

func __sreEvalOsmanya(r rune) bool {
	if r >= rune(0x10480) {
		l32 := len(unicode.Osmanya.R32)
		r32 := uint32(r)
		if l32 <= sreLinearMax {
			if r32 < 0x10480 {
				return false
			}
			if r32 <= 0x1049d {
				return true
			}
			if r32 < 0x104a0 {
				return false
			}
			if r32 <= 0x104a9 {
				return true
			}
		}
		return sreEvalBinary32(unicode.Osmanya.R32, r32)
	}
	return false
}

func __sreEvalTamil(r rune) bool {
	if r <= rune(0x0bfa) {
		l16 := len(unicode.Tamil.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0x0b82 {
				return false
			}
			if r16 <= 0x0b83 {
				return true
			}
			if r16 < 0x0b85 {
				return false
			}
			if r16 <= 0x0b8a {
				return true
			}
			if r16 < 0x0b8e {
				return false
			}
			if r16 <= 0x0b90 {
				return true
			}
			if r16 < 0x0b92 {
				return false
			}
			if r16 <= 0x0b95 {
				return true
			}
			if r16 < 0x0b99 {
				return false
			}
			if r16 <= 0x0b9a {
				return true
			}
			if r16 < 0x0b9c {
				return false
			}
			if r16 <= 0x0b9e {
				return (r16-0x0b9c)/0x0002 == 0
			}
			if r16 < 0x0b9f {
				return false
			}
			if r16 <= 0x0ba3 {
				return (r16-0x0b9f)/0x0004 == 0
			}
			if r16 < 0x0ba4 {
				return false
			}
			if r16 <= 0x0ba8 {
				return (r16-0x0ba4)/0x0004 == 0
			}
			if r16 < 0x0ba9 {
				return false
			}
			if r16 <= 0x0baa {
				return true
			}
			if r16 < 0x0bae {
				return false
			}
			if r16 <= 0x0bb9 {
				return true
			}
			if r16 < 0x0bbe {
				return false
			}
			if r16 <= 0x0bc2 {
				return true
			}
			if r16 < 0x0bc6 {
				return false
			}
			if r16 <= 0x0bc8 {
				return true
			}
			if r16 < 0x0bca {
				return false
			}
			if r16 <= 0x0bcd {
				return true
			}
			if r16 < 0x0bd0 {
				return false
			}
			if r16 <= 0x0bd7 {
				return (r16-0x0bd0)/0x0007 == 0
			}
			if r16 < 0x0be6 {
				return false
			}
			if r16 <= 0x0bfa {
				return true
			}
		}
		return sreEvalBinary16(unicode.Tamil.R16, r16)
	}
	if r >= rune(0x11fc0) {
		l32 := len(unicode.Tamil.R32)
		r32 := uint32(r)
		if l32 <= sreLinearMax {
			if r32 < 0x11fc0 {
				return false
			}
			if r32 <= 0x11ff1 {
				return true
			}
			if r32 < 0x11fff {
				return false
			}
			if r32 <= 0x11fff {
				return true
			}
		}
		return sreEvalBinary32(unicode.Tamil.R32, r32)
	}
	return false
}

func __sreEvalThai(r rune) bool {
	if r <= rune(0x0e5b) {
		l16 := len(unicode.Thai.R16)
		r16 := uint16(r)
		if l16 <= sreLinearMax || r16 <= unicode.MaxLatin1 {
			if r16 < 0x0e01 {
				return false
			}
			if r16 <= 0x0e3a {
				return true
			}
			if r16 < 0x0e40 {
				return false
			}
			if r16 <= 0x0e5b {
				return true
			}
		}
		return sreEvalBinary16(unicode.Thai.R16, r16)
	}
	return false
}
